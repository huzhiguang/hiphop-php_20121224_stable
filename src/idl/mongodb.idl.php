<?php
/**
 * Automatically generated by running "php schema.php mongo".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 *
 * @nolint
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP
#include "mongodb_c_driver/mongo.h"
CPP
);

BeginClass(
  array(
    "name"   => "Mongo",
    "desc"   => "A connection between PHP and MongoDB. ",
    "flags"  => HasDocComment,
    "bases"  => array("Sweepable"),
    "footer" => "",
  ));

DefineFunction(
  array(
    "name"   => "__construct",
    "flags"  => HasDocComment,
    "return" => array(
      "type"   => null,
    ),
    "args"  => array(
      array(
        "name"  => "server",
        "type"  => String,
        "value" => "\"mongodb://localhost:27017\"",
        "desc"  => "string in the following form: mongodb://[username:password@]host1[:port1][,host2[:port2:],...]/db",
      ),
      array(
        "name"  => "options",
        "type"  => Variant,
        "desc"  => "destination address",
        "value" => "null",
      ),
    ),
  ));

DefineFunction(
  array(
    "name"   => "__get",
    "flags"  => HasDocComment,
    "desc"   => "gets a database",
    "return" => array(
      "type"   => Variant,
    ),
    "args"  => array(
      array(
        "name" => "val",
        "type" => Variant,
      ),
    ),
  ));

DefineFunction(
  array(
    "name"   => "selectDB",
    "flags"  => HasDocComment,
    "desc"   => "gets a database",
    "return" => array(
      "type"   => Variant,
    ),
    "args"  => array(
      array(
        "name" => "name",
        "type" => String,
        "desc" => "The database name",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

DefineFunction(
  array(
    'name'   => "close",
    'flags'  =>  HasDocComment,
    "desc"	 => "Closes this connection",
    'return' => array(
      'type'   => Boolean,
    ),
  ));

EndClass();

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    "name"   => "MongoDB",
    "desc"   => "Instances of this class are used to interact with a database",
    "flags"  => HasDocComment,
    "bases"  => array("Sweepable"),
  ));


DefineFunction(
  array(
    "name"   => "__construct",
    "flags"  => HasDocComment,
    "desc"   => "Construct a new simple ZMQ socket",
    "return" => array(
      "type"   => null,
    ),
    "args"  => array(
      array(
        "name"  => "conn",
        "type"  => Object,
        "desc"  => "database connection",
      ),
      array(
        "name"  => "name",
        "type"  => String,
        "desc"  => "database name",
      ),
    ),
  ));


DefineFunction(
  array(
    "name"   => "__get",
    "desc"   => "gets a collection",
    "flags"  => HasDocComment,
    "return" => array(
        "type" => Variant,
        "desc" => "the collection",
    ),
    "args"   => array(
      array(
        "name" => "name",
        "type" => Variant,
      ),
    ),
  ));

DefineFunction(
  array(
    "name"   => "selectCollection",
    "desc"   => "Gets a collection",
    "flags"  => HasDocComment,
    "return" => array(
        "type" => Variant,
        "desc" => "a new collection object.",
    ),
    "args"   => array(
      array(
        "name" => "name",
        "type" => String,
        "desc" => "the collection name"
      ),
    ),
  ));
  
DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    "name"   => "MongoCollection",
    "desc"   => "a database collection",
    "flags"  => HasDocComment,
    "bases"  => array("Sweepable"),
  ));

DefineFunction(
  array(
    "name"   => "__construct",
    "flags"  => HasDocComment,
    "desc"   => "creates a new collection",
    "return" => array(
      "type"   => null,
    ),
    "args"  => array(
      array(
        "name"  => "db",
        "type"  => Object,
        "desc"  => "parent database",
      ),
      array(
        "name"  => "name",
        "type"  => String,
        "desc"  => "name for this collection",
      ),
    ),
  ));

DefineFunction(
  array(
    "name"   => "find",
    "desc"   => "query this collection",
    "flags"  => HasDocComment,
    "return" => array(
        "type" => Variant,
        "desc" => "a cursor for the search results",
    ),
    "args"   => array(
      array(
        "name"  => "query",
        "type"  => VariantMap,
        "value" => "null_array",
        "desc"  => "the fields for which to search",
      ),
      array(
        "name"  => "fields",
        "type"  => VariantMap,
        "value" => "null_array",
        "desc"  => "fields of the results to return",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));


EndClass();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    "name"   => "MongoCursor",
    "desc"   => "A cursor is used to iterate through the results of a database query",
    "ifaces" => array("Iterator"),
    "flags"  => HasDocComment,
    "bases"  => array("Sweepable"),
  ));

DefineFunction(
  array(
    "name"   => "__construct",
    "desc"   => "Create new cursor",
    "flags"  => HasDocComment,
    "return" => array(
      "type"   => null,
    ),
    "args"  => array(
      array(
        "name"  => "connection",
        "type"  => Object,
        "desc"  => "database connection",
      ),
      array(
        "name"  => "ns",
        "type"  => String,
        "desc"  => "full name of database and collection",
      ),
      array(
        "name"  => "query",
        "type"  => VariantMap,
        "value" => "null_array",
        "desc"  => "database query",
      ),
      array(
        "name"  => "fields",
        "type"  => VariantMap,
        "value" => "null_array",
        "desc"  => "fields to return",
      ),
    ),
  ));
DefineFunction(
  array(
    'name'   => 'current',
    'return' => array(
      'type'   => Variant,
    ),
  ));

DefineFunction(
  array(
    'name'   => 'key',
    'return' => array(
      'type'   => Int64,
    ),
  ));

DefineFunction(
  array(
    'name'   => 'next',
    'return' => array(
      'type'   => null,
    ),
  ));

DefineFunction(
  array(
    'name'   => 'rewind',
    'return' => array(
      'type'   => null,
    ),
  ));

DefineFunction(
  array(
    'name'   => 'valid',
    'return' => array(
      'type'   => Boolean,
    ),
  ));
  
DefineFunction(
  array(
    "name"   => "limit",
    "desc"   => "limits the number of results returned",
    "flags"  => HasDocComment,
    "return" => array(
        "type" => Object,
        "desc" => "this cursor",
    ),
    "args"   => array(
      array(
        "name" => "num",
        "type" => Int64,
        "desc" => "the number of results to return",
      ),
    ),
  ));
  
DefineFunction(
  array(
    "name"   => "sort",
    "desc"   => "Sorts the results by given fields",
    "flags"  => HasDocComment,
    "return" => array(
        "type" => Variant,
        "desc" => "Returns the same cursor that this method was called on.",
    ),
    "args"   => array(
      array(
        "name" => "fields",
        "type" => VariantMap,
        "desc" => "An array of fields by which to sort. Each element in the array has as key the field name, and as value either 1 for ascending sort, or -1 for descending sort."
      ),
    ),
  ));
  
DefineFunction(
  array(
    "name"   => "skip",
    "desc"   => "Skips a number of results",
    "flags"  => HasDocComment,
    "return" => array(
        "type" => Variant,
        "desc" => "Returns this cursor.",
    ),
    "args"   => array(
      array(
        "name" => "num",
        "type" => Int32,
        "desc" => "The number of results to skip."
      ),
    ),
  ));  
    
  
  DefineFunction(
  array(
    "name"   => "info",
    "desc"   => "gets the query, fields, limit, and skip for this cursor",
    "flags"  => HasDocComment,
    "return" => array(
        "type" => VariantMap,
        "desc" => "the namespace, limit, skip, query, and fields for this cursor",
    ),
  ));

  
  DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

EndClass();
////////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    "name"   => "MongoDate",
    "desc"   => "MongoDate CLASS",
    "flags"  => HasDocComment,
  ));


 DefineProperty(
  array(
    "name"  => "sec",
    "type"  => Int64,
	"flags"  => HasDocComment,
  )); 

  DefineProperty(
  array(
    "name"  => "usec",
    "type"  => Int64,
	"flags"  => HasDocComment,
  )); 

  DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),"args"   => array(
      array(
        "name" => "sec",
        "type" => Int64,
        "desc" => "sec",
      ),array(
        "name" => "usec",
        "type" => Int64,
        "desc" => "usec",
      ),
   )
  ));

 DefineFunction(
  array(
    "name"   => "__get",
    "flags"  => HasDocComment,
    "desc"   => "get mongodate property",
    "return" => array(
      "type"   => Variant,
    ),
    "args"  => array(
      array(
        "name" => "val",
        "type" => Variant,
      ),
    ),
  ));

 DefineFunction(
  array(
    'name'   => "__set",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "name",
        'type'   => Variant,
      ),
      array(
        'name'   => "value",
        'type'   => Variant,
      ),
    ),
  ));

EndClass();



///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )


///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
//   'taint_observer' => taint propagation information
//     array (
//       'set_mask' => which bits to set automatically
//       'clear_mask' => which bits to clear automatically
//     )
// )


///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//
// EndClass()
