<?php
/**
 * Automatically generated by running "php schema.php mssql".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 *
 * @nolint
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP

CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )


///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
//   'taint_observer' => taint propagation information
//     array (
//       'set_mask' => which bits to set automatically
//       'clear_mask' => which bits to clear automatically
//     )
// )

DefineFunction(
				array(
						'name'   => "mssql_connect",
						'desc'   => "Establishes a connection to a MS SQL server",
						'flags'  =>  HasDocComment,
						'return' => array(
								'type'   => Variant,
								'desc'   => "Returns a MS SQL link identifier on success, or FALSE on error.",
								),
						'args'   => array(
								array(
										'name'   => "server",
										'type'   => String,
										'value'  => "null_string",
										'desc'   => "The MS SQL server. It can also include a port number, e.g. hostname:port (Linux), or hostname,port (Windows).",
									 ),
								array(
										'name'   => "username",
										'type'   => String,
										'value'  => "null_string",
										'desc'   => "The username. Default value is defined by mysql.default_user. In SQL safe mode, this parameter is ignored and the name of the user that owns the server process is used.",
									 ),
								array(
										'name'   => "password",
										'type'   => String,
										'value'  => "null_string",
										'desc'   => "The password. Default value is defined by mysql.default_password. In SQL safe mode, this parameter is ignored and empty password is used.",
									 ),
								array(
										'name'   => "new_link",
										'type'   => Boolean,
										'value'  => "false",
										'desc'   => "If a second call is made to mysql_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned. The new_link parameter modifies this behavior and makes mysql_connect() always open a new link, even if mysql_connect() was called before with the same parameters. In SQL safe mode, this parameter is ignored.",
									 ),
								),
								'taint_observer' => false,
								));
								
DefineFunction(
				array(
						'name'   => "mssql_pconnect",
						'desc'   => "First, when connecting, the function would first try to find a (persistent) link that's already open with the same host, username and password. If one is found, an identifier for it will be returned instead of opening a new connection.",
						'flags'  =>  HasDocComment,
						'return' => array(
								'type'   => Variant,
								'desc'   => "Returns a MS SQL link identifier on success, or FALSE on error.",
								),
						'args'   => array(
								array(
										'name'   => "server",
										'type'   => String,
										'value'  => "null_string",
										'desc'   => "The MS SQL server. It can also include a port number, e.g. hostname:port (Linux), or hostname,port (Windows).",
									 ),
								array(
										'name'   => "username",
										'type'   => String,
										'value'  => "null_string",
										'desc'   => "The username. Default value is defined by mysql.default_user. In SQL safe mode, this parameter is ignored and the name of the user that owns the server process is used.",
									 ),
								array(
										'name'   => "password",
										'type'   => String,
										'value'  => "null_string",
										'desc'   => "The password. Default value is defined by mysql.default_password. In SQL safe mode, this parameter is ignored and empty password is used.",
									 ),
								array(
										'name'   => "new_link",
										'type'   => Boolean,
										'value'  => "false",
										'desc'   => "If a second call is made to mysql_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned. The new_link parameter modifies this behavior and makes mysql_connect() always open a new link, even if mysql_connect() was called before with the same parameters. In SQL safe mode, this parameter is ignored.",
									 ),
								),
								'taint_observer' => false,
								));
DefineFunction(
				array(
						'name'   => "mssql_close",
						'desc'   => "Closes the link to a MS SQL Server database that's associated with the specified link identifier. If the link identifier isn't specified, the last opened link is assumed.",
						'flags'  =>  HasDocComment,
						'return' => array(
								'type'   => Boolean ,
								'desc'   => "Returns TRUE on success or FALSE on failure.",
								),
						'args'   => array(
								array(
										'name'   => "link_identifier",
										'type'   => Variant,
										'value'  => "null",
										'desc'   => "The MSSQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.",
									 ),
								),
						'taint_observer' => false,
					 ));

DefineFunction(
				array(
						'name'   => "mssql_select_db",
						'desc'   => "sets the current active database on the server that's associated with the specified link identifier.",
						'flags'  =>  HasDocComment,
						'return' => array(
								'type'   => Boolean ,
								'desc'   => "Returns TRUE on success or FALSE on failure.",
								),
						'args'   => array(
								array(
										'name'   => "database_name",
										'type'   => String,
										'value'  => "null",
										'desc'   => "The database name. To escape the name of a database that contains spaces, hyphens ("-"), or any other exceptional characters, the database name must be enclosed in brackets, as is shown in the example, below. This technique must also be applied when selecting a database name that is also a reserved word (such as primary).",
									 ),
								array(
										'name'   => "link_identifier",
										'type'   => Variant,
										'value'  => "null",
										'desc'   => "The MSSQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.",
									 ),
								),
						'taint_observer' => false,
					 ));
DefineFunction(
				array(
						'name'   => "mssql_query",
						'desc'   => "sends a query to the currently active database on the server that's associated with the specified link identifier",
						'flags'  =>  HasDocComment,
						'return' => array(
								'type'   => Variant ,
								'desc'   => "Returns a MS SQL result resource on success, TRUE if no rows were returned, or FALSE on error",
								),
						'args'   => array(
								array(
										'name'   => "query",
										'type'   => String,
										'value'  => "null",
										'desc'   => "An SQL query.",
									 ),
								array(
										'name'   => "link_identifier",
										'type'   => Variant,
										'value'  => "null",
										'desc'   => "The MSSQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() was called with no arguments. If no connection is found or established, an E_WARNING level error is generated.",
									 ),
								array(
										'name'   => "batch_size",
										'type'   => Int64,
										'value'  => "0",
										'desc'   => "An SQL query.",
									 ),
								),
						'taint_observer' => false,
					 ));

DefineFunction(
				array(
						'name'   => "mssql_num_rows",
						'desc'   => "returns the number of rows in a result set",
						'flags'  =>  HasDocComment,
						'return' => array(
								'type'   => Variant,
								'desc'   => "Returns the number of rows, as an integer.",
								),
						'args'   => array(
								array(
										'name'   => "result",
										'type'   => Variant,
										'value'  => "null",
										'desc'   => "The result resource that is being evaluated. This result comes from a call to mssql_query().",
									 ),
								),
						'taint_observer' => false,
					 ));

DefineFunction(
				array(
						'name'   => "mssql_rows_affected",
						'desc'   => "Returns the number of records affected by the last write query.",
						'flags'  =>  HasDocComment,
						'return' => array(
								'type'   => Variant,
								'desc'   => "Returns the number of records affected by last operation.",
								),
						'args'   => array(
								array(
										'name'   => "result",
										'type'   => Variant,
										'value'  => "null",
										'desc'   => "A MS SQL link identifier, returned by mssql_connect() or mssql_pconnect()",
									 ),
								),
					 ));
					 
DefineFunction(
				array(
						'name'   => "mssql_fetch_row",
						'desc'   => "fetches one row of data from the result associated with the specified result identifier. The row is returned as an array. Each result column is stored in an array offset, starting at offset 0.Subsequent call to mssql_fetch_row() would return the next row in the result set, or FALSE if there are no more rows.",
						'flags'  =>  HasDocComment,
						'return' => array(
								'type'   => Variant,
								'desc'   => "Returns an array that corresponds to the fetched row, or FALSE if there are no more rows.",
								),
						'args'   => array(
								array(
										'name'   => "result",
										'type'   => Variant,
										'value'  => "null",
										'desc'   => "The result resource that is being evaluated. This result comes from a call to mssql_query().",
									 ),
								),
					 ));
					 
DefineFunction(
				array(
						'name'   => "mssql_fetch_assoc",
						'desc'   => "Returns an associative array that corresponds to the fetched row and moves the internal data pointer ahead. mssql_fetch_assoc() is equivalent to calling mssql_fetch_array() with MSSQL_ASSOC for the optional second parameter.",
						'flags'  =>  HasDocComment,
						'return' => array(
								'type'   => Variant,
								'desc'   => "Returns an associative array that corresponds to the fetched row, or FALSE if there are no more rows.",
								),
						'args'   => array(
								array(
										'name'   => "result",
										'type'   => Variant,
										'value'  => "null",
										'desc'   => "The result resource that is being evaluated. This result comes from a call to mssql_query().",
									 ),
								),
					 ));

DefineFunction(
				array(
						'name'   => "mssql_free_result",
						'desc'   => "mssql_free_result() only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script ends. You may call mssql_free_result() with the result identifier as an argument and the associated result memory will be freed.",
						'flags'  =>  HasDocComment,
						'return' => array(
								'type'   => Variant,
								'desc'   => "Returns TRUE on success or FALSE on failure.",
								),
						'args'   => array(
								array(
										'name'   => "result",
										'type'   => Variant,
										'value'  => "null",
										'desc'   => "The result resource that is being freed. This result comes from a call to mssql_query().",
									 ),
								),
					 ));
					 
DefineFunction(
				array(
						'name'   => "mssql_get_last_message",
						'desc'   => "Gets the last message from the MS-SQL server",
						'flags'  =>  HasDocComment,
						'return' => array(
								'type'   => Variant,
								'desc'   => "Returns last error message from server, or an empty string if no error messages are returned from MSSQL.",
								),
					 ));

BeginClass(
				array(
						"name"   => "MssqlResult",
						"desc"   => "create a class of MssqlResult",
						"flags"  => HasDocComment,
						"footer" => "",
					 )
		  );

DefineFunction(
				array(
						'name'   => "__construct",
						'flags'  => HasDocComment,
						'return' => array(
								'type'  => null,
						),
					 )
			  );

DefineFunction(
				array(
						'name'   => "__toString",
						'flags'  => HasDocComment,
						'return' => array(
								'type'  => String,
						),
					 )
			  );

EndClass();
///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//asdasd
// EndClass()

