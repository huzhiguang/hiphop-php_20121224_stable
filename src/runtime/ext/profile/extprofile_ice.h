/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010- Facebook, Inc. (http://www.facebook.com)         |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXTPROFILE_ICE_H__
#define __EXTPROFILE_ICE_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include <runtime/ext/ext_ice.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

inline Object x_ice_initialize() {
  FUNCTION_INJECTION_BUILTIN(ice_initialize);
  return f_ice_initialize();
}

inline Object x_icephp_defineproxy(CObjRef classobj) {
  FUNCTION_INJECTION_BUILTIN(icephp_defineproxy);
  return f_icephp_defineproxy(classobj);
}

inline Object x_icephp_declareclass(CStrRef id = null) {
  FUNCTION_INJECTION_BUILTIN(icephp_declareclass);
  return f_icephp_declareclass(id);
}

inline Object x_icephp_defineexception(CStrRef id = null, CStrRef name = null, CVarRef base = null, CVarRef members = null) {
  FUNCTION_INJECTION_BUILTIN(icephp_defineexception);
  return f_icephp_defineexception(id, name, base, members);
}

inline Variant x_create_typeinfobyid(int id = 0) {
  FUNCTION_INJECTION_BUILTIN(create_typeinfobyid);
  return f_create_typeinfobyid(id);
}

inline String x_icephp_stringifyexception(CObjRef value = null, CObjRef target = null) {
  FUNCTION_INJECTION_BUILTIN(icephp_stringifyexception);
  return f_icephp_stringifyexception(value, target);
}

inline String x_icephp_stringify(CObjRef value = null, CObjRef target = null) {
  FUNCTION_INJECTION_BUILTIN(icephp_stringify);
  return f_icephp_stringify(value, target);
}

inline Object x_icephp_definesequence(CStrRef id = null, CVarRef elementtype = null) {
  FUNCTION_INJECTION_BUILTIN(icephp_definesequence);
  return f_icephp_definesequence(id, elementtype);
}

inline Object x_icephp_defineclass(CStrRef id, CStrRef name, bool isabstract = true, CObjRef base = null, CVarRef interfaces = null, CVarRef members = null) {
  FUNCTION_INJECTION_BUILTIN(icephp_defineclass);
  return f_icephp_defineclass(id, name, isabstract, base, interfaces, members);
}

inline void x_icephp_defineoperation(CObjRef classobj = null, CStrRef funname = null, int mode = null, int sendmode = null, CVarRef inparams = null, CVarRef outparams = null, CVarRef returntype = null, CVarRef exceptions = null) {
  FUNCTION_INJECTION_BUILTIN(icephp_defineoperation);
  f_icephp_defineoperation(classobj, funname, mode, sendmode, inparams, outparams, returntype, exceptions);
}

inline Object x_ice_find(CStrRef ice_name = null) {
  FUNCTION_INJECTION_BUILTIN(ice_find);
  return f_ice_find(ice_name);
}

inline bool x_ice_register(CObjRef ice_object, CStrRef ice_name = null, int64 expires = null) {
  FUNCTION_INJECTION_BUILTIN(ice_register);
  return f_ice_register(ice_object, ice_name, expires);
}


///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXTPROFILE_ICE_H__
