/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010- Facebook, Inc. (http://www.facebook.com)         |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXT_MSSQL_H__
#define __EXT_MSSQL_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include <runtime/base/base_includes.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <list>
#include <map>
#include <freetds/sybfront.h>
#include <freetds/sybdb.h>
using namespace std;

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////
//extern MHANDLEFUNC mssql_glob_proc;

FORWARD_DECLARE_CLASS_BUILTIN(MssqlResult);
class MSSQL;
typedef list<BYTE *> ResList;
class c_MssqlResult : public ExtObjectData,public Sweepable {
	public:
		DECLARE_CLASS(MssqlResult, MssqlResult, ObjectData)
	public:
		c_MssqlResult(const ObjectStaticCallbacks *cb = &cw_MssqlResult);
		~c_MssqlResult();
	public:
		void t___construct();
		DECLARE_METHOD_INVOKE_HELPERS(__construct);
	public:
  		String t___tostring();
    	DECLARE_METHOD_INVOKE_HELPERS(__tostring);
	public: c_MssqlResult *create();
	public: 
		Array v_result;
		int64 cursor;
		ResList resList;
};

class MSSQL : public SweepableResourceData {
public:
  MSSQL(const char *server, const char *username, const char *password, bool new_link);
  ~MSSQL();	
	  
	static DBPROCESS *GetConn(CVarRef link_identifier, MSSQL **rconn = NULL);
	static MSSQL *Get(CVarRef link_identifier);
	static bool CloseConn(CVarRef link_identifier);

	//persistent
	static MSSQL *GetPersistent(CStrRef server, CStrRef username, CStrRef password,int client_flags);
	static void SetPersistent(CStrRef server, CStrRef username, CStrRef password,int client_flags);

	DBPROCESS *get() { return m_conn;}
private:
							
public:
	std::string m_server;
	std::string m_username;
	std::string m_password;
	std::string m_database;
	bool m_last_error_set;
	int m_last_errno;
	DBPROCESS *m_conn;
	std::string m_last_error;
	bool isPersistent;
	c_MssqlResult *cmr;
	LOGINREC *loginRec;
	//function 
	DBPROCESS *create_new_conn();

};

class MSsql_result_field {
	public:
		MSsql_result_field();
		~MSsql_result_field();
	public:
		char* fname;
		BYTE *pdata;
		size_t data_len;
		int type;
};

typedef list<MSsql_result_field*> fieldList;

class MSsql_result {
public:
	MSsql_result();
	~MSsql_result();
public:
	int cur_row;
	int cur_fields;
	int num_rows;
	int num_fields;
	int have_fields;
	fieldList fields;
	DBPROCESS *m_conPtr;
};

typedef list<MSsql_result*> msresultList;

Variant f_mssql_connect(CStrRef server = null_string, CStrRef username = null_string, CStrRef password = null_string, bool new_link = false);
Variant f_mssql_pconnect(CStrRef server = null_string, CStrRef username = null_string, CStrRef password = null_string, bool new_link = false);
bool f_mssql_close(CVarRef link_identifier = null);
bool f_mssql_select_db(CStrRef database_name = null, CVarRef link_identifier = null);
Variant f_mssql_query(CStrRef query = null, CVarRef link_identifier = null, int64 batch_size = 0);
Variant f_mssql_num_rows(CVarRef result = null);
Variant f_mssql_rows_affected(CVarRef result = null);
Variant f_mssql_fetch_row(CVarRef result = null);
Variant f_mssql_fetch_assoc(CVarRef result = null);
Variant f_mssql_free_result(CVarRef result = null);
Variant f_mssql_get_last_message();
int f_msg_handler(DBPROCESS * dbproc, DBINT msgno, int msgstate, int severity, char *msgtext, char *srvname, char *procname, int line); 
///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXT_MSSQL_H__
